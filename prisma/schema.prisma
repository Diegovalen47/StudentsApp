generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Course {
  courseId   Int    @id @default(autoincrement())
  name       String @db.VarChar(100)
  credits    Int
  typologyId Int

  @@index([typologyId], map: "typologyId")
}

model Inscription {
  inscriptionId Int      @id @default(autoincrement())
  targetScore   Decimal? @db.Decimal(2, 1)
  courseId      Int
  semesterId    Int

  @@index([courseId], map: "courseId")
  @@index([semesterId], map: "semesterId")
}

model Partial {
  partialId     Int      @id @default(autoincrement())
  name          String   @db.VarChar(100)
  weight        Decimal  @db.Decimal(4, 3)
  score         Decimal? @db.Decimal(2, 1)
  inscriptionId Int

  @@index([inscriptionId], map: "inscriptionId")
}

model Semester {
  semesterId  Int      @id @default(autoincrement())
  number      Int
  year        Int
  period      Int
  targetScore Decimal? @db.Decimal(2, 1)
  planId      Int

  @@index([planId], map: "planId")
}

model Student {
  studentId  Int     @id @default(autoincrement())
  userName   String? @unique(map: "userName") @db.VarChar(100)
  name       String  @db.VarChar(100)
  lastName   String? @db.VarChar(100)
  password   String? @db.VarChar(300)
  email      String  @unique(map: "email") @db.VarChar(100)
}

model StudyPlan {
  planId        Int     @id @default(autoincrement())
  name          String  @db.VarChar(100)
  approvalScore Decimal @db.Decimal(2, 1)
  minimunScore  Decimal @db.Decimal(2, 1)
  maximumScore  Decimal @db.Decimal(2, 1)
  studentId     Int

  @@index([studentId], map: "studentId")
}

model Typology {
  typologyId      Int    @id @default(autoincrement())
  name            String @db.VarChar(50)
  requiredCredits Int
  planId          Int

  @@index([planId], map: "planId")
}

model Account {
  accountId         String  @id @default(cuid())
  studentId         Int     @unique
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  tokenId           String?
  sessionState      String?
  subscribed        Boolean @default(false)

  @@unique([provider, providerAccountId])
  @@index([studentId], map: "studentId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  studentId    Int
  expires      DateTime

  @@index([studentId], map: "studentId")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
